local cmp = require("cmp.init")


vim.opt.completeopt = { "menu", "menuone", "noselect" }

cmp.event:on("confirm_done", require("nvim-autopairs.completion.cmp").on_confirm_done())
-- cmp.setup({
--     window = {
--         -- completion = cmp.config.window.bordered(),
--         -- documentation = cmp.config.window.bordered(),
--     },
--     mapping = cmp.mapping.preset.insert({
--         ["<C-b>"] = cmp.mapping.scroll_docs(-4),
--         ["<C-f>"] = cmp.mapping.scroll_docs(4),
--         -- ['<C-Space>'] = cmp.mapping.complete({}),
--         -- cmp.mapping.
--         ["<C-o>"] = cmp.mapping.complete({}),
--         ["<C-e>"] = cmp.mapping.abort(),
--         -- ["<CR>"] = cmp.mapping.confirm({ select = false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
--     }),
--     sources = cmp.config.sources({
--         { name = "nvim_lsp" },
--         { name = "nvim_lsp_signature_help" },
--         { name = "crates" },
--         -- { name = 'vsnip' }, -- For vsnip users.
--         -- { name = 'luasnip' }, -- For luasnip users.
--         -- { name = 'snippy' }, -- For snippy users.
--     -- }, {
--         { name = "buffer" },
--     }),
--     formatting = {
--         format = require("lspkind").cmp_format({
--             mode = "symbol", -- show only symbol annotations
--             maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
--             ellipsis_char = "...", -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)
--             -- The function below will be called before any actual modifications from lspkind
--             -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
--             before = function(_, vim_item)
--                 return vim_item
--             end,
--         }),
--     },
-- })

-- require("lspkind").init({
-- 	-- defines how annotations are shown
-- 	-- default: symbol
-- 	-- options: 'text', 'text_symbol', 'symbol_text', 'symbol'
-- 	mode = "symbol_text",
-- 	-- default symbol map
-- 	-- can be either 'default' (requires nerd-fonts font) or
-- 	-- 'codicons' for codicon preset (requires vscode-codicons font)
-- 	--
-- 	-- default: 'default'
-- 	preset = "codicons",
-- 	-- override preset symbols
-- 	--
-- 	-- default: {}
-- 	symbol_map = {
-- 		Text = "",
-- 		Method = "",
-- 		Function = "",
-- 		Constructor = "",
-- 		Field = "ﰠ",
-- 		Variable = "",
-- 		Class = "ﴯ",
-- 		Interface = "",
-- 		Module = "",
-- 		Property = "ﰠ",
-- 		Unit = "塞",
-- 		Value = "",
-- 		Enum = "",
-- 		Keyword = "",
-- 		Snippet = "",
-- 		Color = "",
-- 		File = "",
-- 		Reference = "",
-- 		Folder = "",
-- 		EnumMember = "",
-- 		Constant = "",
-- 		Struct = "פּ",
-- 		Event = "",
-- 		Operator = "",
-- 		TypeParameter = "",
-- 	},
-- })
